{"ast":null,"code":"var _jsxFileName = \"/home/afe/Documents/project/Social Ape/social-ape-client/src/components/layout/Notifications.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport PropTypes from \"prop-types\"; //MUI\n\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Badge from \"@material-ui/core/Badge\"; //Icons\n\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ChatIcon from \"@material-ui/icons/Chat\"; //Redux\n\nimport { connect } from \"react-redux\";\nimport { markNotificationsRead } from \"../../redux/actions/userActions\";\n\nclass Notifications extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      anchorEl: null\n    };\n\n    this.handleOpen = event => {\n      this.setState({\n        anchorEl: event.target\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        anchorEl: null\n      });\n    };\n\n    this.onMenuOpened = () => {\n      let unreadNotificationsId = this.props.notifications.filter(not => !not.read).map(not => not.notificationId);\n      this.props.markNotificationsRead(unreadNotificationsId);\n    };\n  }\n\n  render() {\n    const {\n      notifications\n    } = this.props;\n    const {\n      anchorEl\n    } = this.state;\n    dayjs.extend(relativeTime);\n    let notificationsIcon;\n\n    if (notifications && notifications.length > 0) {\n      notifications.filter(not => not.read === false).length > 0 ? notificationsIcon = /*#__PURE__*/React.createElement(Badge, {\n        badgeContent: notifications.filter(not => not.read === false).length,\n        color: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(NotificationsIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }\n      })) : notificationsIcon = /*#__PURE__*/React.createElement(NotificationsIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 32\n        }\n      });\n    } else {\n      notificationsIcon = /*#__PURE__*/React.createElement(NotificationsIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 27\n        }\n      });\n    }\n\n    let notificationsMarkup = notifications && notifications.length > 0 ? notifications.map(not => {\n      const verb = not.type === \"like\" ? \"liked\" : \"commented on\";\n      const time = dayjs(not.createdAt).fromNow();\n      const iconColor = not.read ? \"primary\" : \"secondary\";\n      const icon = not.type === \"like\" ? /*#__PURE__*/React.createElement(FavoriteIcon, {\n        color: iconColor,\n        style: {\n          marginRight: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }\n      }) : /*#__PURE__*/React.createElement(ChatIcon, {\n        color: iconColor,\n        style: {\n          marginRight: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }\n      });\n      return /*#__PURE__*/React.createElement(MenuItem, {\n        key: not.createdAt,\n        onClick: this.handleClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }, icon, /*#__PURE__*/React.createElement(Typography, {\n        component: Link,\n        color: \"default\",\n        variant: \"body1\",\n        to: `/users/${not.recipient}/scream/${not.screamId}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }\n      }, not.sender, \" verb} your scream \", time));\n    }) : /*#__PURE__*/React.createElement(MenuItem, {\n      onClick: this.handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, \"You have no notifications yet\");\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Tooltip, {\n      placement: \"top\",\n      title: \"Notifications\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-owns\": anchorEl ? \"simple-menu\" : undefined,\n      \"aria-haspopup\": \"true\",\n      onClick: this.handleOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, notificationsIcon)), /*#__PURE__*/React.createElement(Menu, {\n      anchorEl: anchorEl,\n      open: Boolean(anchorEl),\n      onClose: this.handleClose,\n      onEntered: this.onMenuOpened,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, notificationsMarkup));\n  }\n\n}\n\nNotifications.propTypes = {\n  markNotificationsRead: PropTypes.func.isRequired,\n  notifications: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  notifications: state.user.notifications\n});\n\nexport default connect(mapStateToProps, {\n  markNotificationsRead\n})(Notifications);","map":{"version":3,"sources":["/home/afe/Documents/project/Social Ape/social-ape-client/src/components/layout/Notifications.js"],"names":["React","Component","Fragment","Link","dayjs","relativeTime","PropTypes","Menu","MenuItem","IconButton","Tooltip","Typography","Badge","NotificationsIcon","FavoriteIcon","ChatIcon","connect","markNotificationsRead","Notifications","state","anchorEl","handleOpen","event","setState","target","handleClose","onMenuOpened","unreadNotificationsId","props","notifications","filter","not","read","map","notificationId","render","extend","notificationsIcon","length","notificationsMarkup","verb","type","time","createdAt","fromNow","iconColor","icon","marginRight","recipient","screamId","sender","undefined","Boolean","propTypes","func","isRequired","object","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport PropTypes from \"prop-types\";\n//MUI\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Badge from \"@material-ui/core/Badge\";\n//Icons\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\n//Redux\nimport { connect } from \"react-redux\";\nimport { markNotificationsRead } from \"../../redux/actions/userActions\";\n\nclass Notifications extends Component {\n  state = {\n    anchorEl: null,\n  };\n  handleOpen = (event) => {\n    this.setState({\n      anchorEl: event.target,\n    });\n  };\n  handleClose = () => {\n    this.setState({\n      anchorEl: null,\n    });\n  };\n  onMenuOpened = () => {\n    let unreadNotificationsId = this.props.notifications\n      .filter((not) => !not.read)\n      .map((not) => not.notificationId);\n    this.props.markNotificationsRead(unreadNotificationsId)\n  };\n  render() {\n    const { notifications } = this.props;\n    const { anchorEl } = this.state;\n    dayjs.extend(relativeTime);\n\n    let notificationsIcon;\n    if (notifications && notifications.length > 0) {\n      notifications.filter((not) => not.read === false).length > 0\n        ? (notificationsIcon = (\n            <Badge\n              badgeContent={\n                notifications.filter((not) => not.read === false).length\n              }\n              color='secondary'>\n              <NotificationsIcon />\n            </Badge>\n          ))\n        : (notificationsIcon = <NotificationsIcon />);\n    } else {\n      notificationsIcon = <NotificationsIcon />;\n    }\n    let notificationsMarkup =\n      notifications && notifications.length > 0 ? (\n        notifications.map((not) => {\n          const verb = not.type === \"like\" ? \"liked\" : \"commented on\";\n          const time = dayjs(not.createdAt).fromNow();\n          const iconColor = not.read ? \"primary\" : \"secondary\";\n          const icon =\n            not.type === \"like\" ? (\n              <FavoriteIcon color={iconColor} style={{ marginRight: 10 }} />\n            ) : (\n              <ChatIcon color={iconColor} style={{ marginRight: 10 }} />\n            );\n\n          return (\n            <MenuItem key={not.createdAt} onClick={this.handleClose}>\n              {icon}\n              <Typography\n                component={Link}\n                color='default'\n                variant='body1'\n                to={`/users/${not.recipient}/scream/${not.screamId}`}>\n                {not.sender} verb} your scream {time}\n              </Typography>\n            </MenuItem>\n          );\n        })\n      ) : (\n        <MenuItem onClick={this.handleClose}>\n          You have no notifications yet\n        </MenuItem>\n      );\n    return (\n      <Fragment>\n        <Tooltip placement='top' title='Notifications'>\n          <IconButton\n            aria-owns={anchorEl ? \"simple-menu\" : undefined}\n            aria-haspopup='true'\n            onClick={this.handleOpen}>\n            {notificationsIcon}\n          </IconButton>\n        </Tooltip>\n        <Menu\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={this.handleClose}\n          onEntered={this.onMenuOpened}>\n          {notificationsMarkup}\n        </Menu>\n      </Fragment>\n    );\n  }\n}\n\nNotifications.propTypes = {\n  markNotificationsRead: PropTypes.func.isRequired,\n  notifications: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  notifications: state.user.notifications,\n});\n\nexport default connect(mapStateToProps, { markNotificationsRead })(\n  Notifications,\n);\n"]},"metadata":{},"sourceType":"module"}